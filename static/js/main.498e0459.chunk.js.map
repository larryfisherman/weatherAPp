{"version":3,"sources":["components/SearchingBar/SearchingBar.jsx","icons/index.js","icons/Clear.svg","icons/Clouds.svg","icons/Flurries.svg","icons/mist.svg","icons/rain.svg","icons/snow.svg","icons/sunny.svg","components/WeatherBox/WeatherBox.jsx","components/WeekDays/WeekDays.jsx","components/AdditionalInfo/AdditionalInfo.jsx","components/App.js","index.js"],"names":["api","SearchingBar","shareApi","shareToggleClass","useState","toggleClass","setToggleClass","query","setQuery","setWeather","type","placeholder","className","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","temp","Math","floor","main","tempMin","temp_min","tempMax","temp_max","location","name","sunrise","Date","sys","toISOString","substr","sunset","country","wind","speed","pressure","sky","weather","console","log","Icons","Clear","Clouds","Flurries","mist","rain","snow","sunny","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","WeatherBox","src","WeekDays","AdditionalInfo","App","setResult","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.498e0459.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './SearchingBar.css'\r\n\r\n  const api = {\r\n    key: \"5460cb53463514612fab001d3067fc4e\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n  }\r\n\r\n  const SearchingBar = ({shareApi, shareToggleClass}) => {\r\n    \r\n    const [toggleClass, setToggleClass] = useState(false);\r\n    const [query, setQuery] = useState('');\r\n    const [weather, setWeather] = useState({});    \r\n    \r\n    const search = event => {\r\n        if(event.key === \"Enter\") {\r\n            setToggleClass(true);\r\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    setWeather(result);\r\n                    const temp = (Math.floor(result.main.temp));\r\n                    const tempMin = result.main.temp_min\r\n                    const tempMax = result.main.temp_max;\r\n                    const location = result.name;\r\n                    const sunrise = new Date(result.sys.sunrise * 1000).toISOString().substr(11, 8);\r\n                    const sunset = new Date(result.sys.sunset * 1000).toISOString().substr(11, 8);\r\n                    const country = result.sys.country;\r\n                    const wind = result.wind.speed;\r\n                    const pressure = result.main.pressure;\r\n                    const sky = result.weather[0].main;\r\n                    console.log(result.weather[0].main)\r\n                    console.log(result)\r\n                    shareApi({tempMax, location, tempMin, sunrise, sunset, wind, country, pressure, temp, sky});\r\n                    shareToggleClass({toggleClass})\r\n                    \r\n                })\r\n        }\r\n    }\r\n    return (\r\n        <input type = \"text\"\r\n          placeholder = \"Search..\"\r\n          className = {toggleClass ? \"Active\" : \"unActive\"}\r\n          onChange = {e => setQuery(e.target.value)}\r\n          value = {query}\r\n          onKeyPress = {search}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchingBar;","import Clear from './Clear.svg'\r\nimport Clouds from './Clouds.svg'\r\nimport Flurries from './Flurries.svg'\r\nimport mist from './mist.svg'\r\nimport rain from './rain.svg'\r\nimport snow from './snow.svg'\r\nimport sunny from './sunny.svg'\r\n\r\nexport const Icons = {\r\n  Clear,\r\n  Clouds,\r\n  Flurries,\r\n  mist,\r\n  rain,\r\n  snow,\r\n  sunny\r\n}","export default __webpack_public_path__ + \"static/media/Clear.63561cd5.svg\";","export default __webpack_public_path__ + \"static/media/Clouds.4e0858f0.svg\";","export default __webpack_public_path__ + \"static/media/Flurries.da4a73d7.svg\";","export default __webpack_public_path__ + \"static/media/mist.a6733a73.svg\";","export default __webpack_public_path__ + \"static/media/rain.6412f4fc.svg\";","export default __webpack_public_path__ + \"static/media/snow.5ccde895.svg\";","export default __webpack_public_path__ + \"static/media/sunny.f72ea8a7.svg\";","import React from 'react';\r\nimport './WeatherBox.css'\r\nimport { Icons } from '../../icons';\r\n\r\n\r\nconst dateBuilder = (d) => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n}\r\n\r\nconst WeatherBox = ({result}) => {\r\n    \r\n        return (\r\n            <div className=\"locationDate\">\r\n                <span>{result.location}</span>\r\n                <span>{dateBuilder(new Date())}</span>\r\n                <span>{result.temp}°C</span>\r\n                <img src={Icons[result.sky]} />   \r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default WeatherBox;","import React from 'react';\r\nimport './WeekDays.css'\r\n\r\nconst WeekDays = () => {\r\n\r\n    return (\r\n        <div className=\"weekDays\">\r\n            <div className=\"monday\"> Monday </div>\r\n            <div className=\"tuesday\">Tuesday</div>\r\n            <div className=\"wednesday\">Wednesday</div>\r\n            <div className=\"thursday\">Thursday</div>\r\n            <div className=\"friday\">Friday</div>\r\n            <div className=\"saturday\">Saturday</div>\r\n            <div className=\"sunday\">Sunday</div>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default WeekDays;","import React, {useState} from 'react';\r\nimport './AdditionalInfo.css'\r\n\r\n\r\nconst AdditionalInfo = ({result, shareToggleClass}) => {\r\n\r\n  const [api, setApi] = useState(false);\r\n  \r\n    return (\r\n     <div className=\"additionalInfo\">\r\n       <div className=\"maxTemp\"> \r\n          <p>{Math.floor(result.tempMax)}°C</p>\r\n          <p>Temp. max.</p>\r\n        </div>\r\n        <div className=\"wind\">\r\n          <p>{(result.wind)} mph</p>\r\n          <p>Wind</p>\r\n        </div>\r\n        <div className=\"sunrise\">\r\n         <p>{result.sunrise}</p> \r\n         <p>Sunrise</p>\r\n        </div>\r\n        <div className=\"lowestTemp\">\r\n          <p>{Math.floor(result.tempMin)}°C</p>\r\n          <p>Temp. min.</p>\r\n        </div>\r\n        <div className=\"pressure\">\r\n          <p>{result.pressure} hPa</p>\r\n          <p>Pressure</p>\r\n        </div>\r\n        <div className=\"sunset\">\r\n          <p>{result.sunset}</p>\r\n          <p>Sunset</p>  \r\n        </div>\r\n     </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AdditionalInfo;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport SearchingBar from './SearchingBar/SearchingBar'\r\nimport WeatherBox from './WeatherBox/WeatherBox'\r\nimport WeekDays from '../components/WeekDays/WeekDays'\r\nimport AdditionalInfo from './AdditionalInfo/AdditionalInfo';\r\n\r\nconst App = () =>  {\r\n\r\n  const [result, setResult] = useState({});\r\n  const [toggleClass, setToggleClass] = useState(false);\r\n \r\n  const shareApi = (res) => {\r\n    setResult(res)\r\n  }\r\n  \r\n  const shareToggleClass = (res) => {\r\n    setToggleClass(res)\r\n  }\r\n\r\n    return (\r\n      <div className={toggleClass ? \"activeApp\" : \"unActiveApp\" }>\r\n        <div className={toggleClass ? \"activeHeader\" : \"unActiveHeader\" }>\r\n            <h1 className = {toggleClass ? \"active\" : \"unActive\" }> Weather App </h1>\r\n            <SearchingBar shareApi = {shareApi} shareToggleClass = {shareToggleClass}/>\r\n        </div>\r\n        <div className={toggleClass ? \"activeMain\" : \"unActiveMain\" }>\r\n            <WeatherBox result = {result}/>\r\n            <AdditionalInfo result = {result} shareToggleClass = {shareToggleClass}/>\r\n            <WeekDays result = {result}/>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}